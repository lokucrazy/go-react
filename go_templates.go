// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 4, 19, 7, 6, 33, 150080800, time.UTC),
		},
		"/dist": &vfsgen۰DirInfo{
			name:    "dist",
			modTime: time.Date(2020, 4, 19, 7, 6, 39, 88605700, time.UTC),
		},
		"/dist/index.txt": &vfsgen۰CompressedFileInfo{
			name:             "index.txt",
			modTime:          time.Date(2020, 4, 19, 7, 6, 39, 655223200, time.UTC),
			uncompressedSize: 197,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xb1\xae\xc2\x30\x0c\x45\xf7\x27\xbd\x7f\x30\xd9\x21\x2b\x83\xdb\x05\x10\x23\x08\xb1\x30\xa6\xb1\x51\x82\x52\x82\x12\xb7\x12\x7f\x8f\x48\x13\x26\xdb\x3a\xbe\x47\x17\x57\xfb\xd3\xee\x7a\x3b\x1f\xc0\xc9\x18\xfa\xff\x3f\xac\x13\x00\x1d\x1b\x2a\x1b\x00\x8e\x2c\x06\xac\x33\x29\xb3\x74\x6a\x92\xfb\x7a\xab\x1a\x13\x2f\x81\xfb\x63\x84\x0b\x1b\x2b\xa8\x97\xbb\x28\xf4\xcf\x81\x43\xa4\x77\x4b\x90\x9f\xc1\x53\xa7\x52\x8c\xa2\x7a\xd4\xe4\xe7\x86\xb2\x4d\xfe\x25\x90\x93\xed\xd4\x30\x3d\x29\xf0\xe6\x91\xbf\x3f\x0b\xa8\xda\x2a\x43\x5d\xda\x7e\x02\x00\x00\xff\xff\x8b\xd6\xc1\xde\xc5\x00\x00\x00"),
		},
		"/main.txt": &vfsgen۰CompressedFileInfo{
			name:             "main.txt",
			modTime:          time.Date(2020, 4, 19, 4, 6, 15, 371277200, time.UTC),
			uncompressedSize: 1019,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc1\x6a\xdc\x30\x10\x3d\xdb\xe0\x7f\x98\xea\x50\xec\x60\xe4\x4d\xa1\x34\x2c\xe4\x90\x43\x42\x53\x42\x08\xbb\x2d\x3d\x16\xc5\x9e\xb5\x27\x95\x25\x77\x34\x4e\x36\x94\xfd\xf7\x22\xed\x6e\x53\xda\x5c\xba\x17\x4b\x4f\x4f\xf3\xde\xcc\xd3\x4e\xa6\xfd\x6e\x7a\x84\xd1\x90\x2b\xf2\x22\xa7\x71\xf2\x2c\x50\x16\x79\xa6\xd0\xb5\xbe\x23\xd7\x37\x0f\xc1\x3b\x15\x11\xeb\xfb\xf4\x75\x28\xcd\x20\x32\xa5\x8d\x0f\xe9\x33\x19\x19\x9a\x0d\x59\x8c\x8b\x84\x08\x8d\xa8\x62\xd1\x4c\xf5\x24\xc3\x7c\xaf\x5b\x3f\x36\xbd\x67\xb2\xd6\x34\xe3\xbc\x55\x45\x5e\xc5\x73\x79\x9e\x10\xfc\xfd\x03\xb6\x02\x41\x78\x6e\x05\x7e\x16\x79\xe6\xcc\x88\x71\x4f\xae\x2f\xf2\x2c\xba\x04\x72\x52\xe4\xbb\x78\x67\x33\xbb\x36\xb9\x2e\xab\x44\xee\x88\x61\x79\x0e\x4a\x37\x1b\xf6\x4e\xd0\x75\x4d\x47\x41\xa2\x91\x74\x30\xce\x5b\x7d\x8b\x4f\x2b\x3f\x0b\x72\x59\x45\x58\xdf\x19\x19\xee\x18\x37\xb4\x2d\x55\xa3\x2a\xfd\xd1\xb8\xce\x22\x5f\xcd\xae\x2d\x63\xfd\xf2\x09\x62\x97\x7a\x85\x61\xf2\x2e\xe0\x57\x26\x41\xae\x81\xe1\xe4\x80\xff\x98\x31\xc8\xde\x40\x16\xfb\x8e\x4a\xc7\x19\xe8\x4f\x9e\x5c\xd9\x51\xbc\xa0\xbf\xac\x6e\x92\x5c\x14\xce\xbe\xd5\x80\x9c\x5c\xf9\xa0\xd7\x62\xa4\x9c\x8e\x47\xb4\x89\xd8\x75\xb8\xf5\x72\xb9\xa5\x20\x25\x32\x1f\xea\x67\x49\x73\x8d\xfc\x88\x57\x64\xb1\x7c\xaa\x81\xeb\xd7\xd4\x14\xb9\x0e\xb7\x7a\x90\xd1\xaa\x2a\x55\xcd\x18\x65\x66\x17\x97\x3b\x40\x1b\x10\x68\x93\x2c\xbc\x39\x07\x47\xf6\xcf\xfa\x97\xcc\x9e\x63\x6d\x64\x3e\x6c\xaa\x7a\x3f\x86\xe8\x74\x0e\xd7\x4e\x90\x9d\xb1\xc9\x08\x27\xc6\x3f\x1a\x29\xf4\xd7\xfd\x1e\x3b\xdd\xa5\xe4\x33\x33\x51\x9c\xc3\x5f\x59\x98\x89\x54\xa5\xd7\xf3\x3d\xbf\xc4\x65\x26\x3a\x04\x94\xf2\x51\x8d\xaa\xe1\xff\x43\x6a\x1a\x58\x8b\x61\x81\x67\x3f\x33\x44\xf5\x01\x19\x5f\xfc\x04\x7e\x8c\x7e\xde\xbe\x78\xe7\x74\xef\xf0\x34\x96\x90\x7e\x5c\x47\xec\xa2\xeb\x8e\x00\x00\xa8\xd3\x77\x1f\xf4\x42\x2f\xf4\xe9\xf2\x6c\x71\xb6\x50\x89\x92\xcc\x7c\xa6\x11\xfd\x2c\x4b\x38\x7d\x0f\x27\x10\xff\x15\x7a\x8d\xad\x77\x5d\xa2\xac\xd0\x74\xbf\x19\xaf\x52\xf6\xe3\xb4\xbe\xd7\x77\x4c\x4e\xac\x2b\x95\xa5\x20\xe8\xc8\xf5\xe0\x1d\x58\xdf\x1a\x3b\xf8\x20\x7b\xe1\xea\x40\xbe\x32\x62\x6c\x19\xf8\x51\xdf\x24\xf6\x85\xeb\x52\x43\x65\x7c\x13\xbb\x22\xff\x15\x00\x00\xff\xff\xda\x6a\x4b\x44\xfb\x03\x00\x00"),
		},
		"/package.txt": &vfsgen۰CompressedFileInfo{
			name:             "package.txt",
			modTime:          time.Date(2020, 4, 19, 6, 4, 53, 415000000, time.UTC),
			uncompressedSize: 484,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x6e\xf3\x20\x10\x84\xef\x7e\x8a\x15\x87\x9c\xfe\xec\x1f\x6c\xcb\x6a\x7d\xaa\x54\xf5\xd0\x73\xaf\x51\x24\x02\x1b\x65\x5b\x1b\x2c\x20\x6d\xaa\x2a\xef\x5e\x81\xed\xda\x39\x32\xdf\x0c\x33\xf0\x53\x00\x08\xab\x7a\x12\x2d\x88\x93\x77\x36\x92\x35\xe2\x5f\x52\x3f\xc9\x07\x76\x36\x01\x89\x3b\xdc\x8d\xaa\xa1\xa0\x3d\x0f\x71\x22\xa3\xd8\x2b\xce\x27\xb6\x86\xae\xf8\x1e\x46\x75\x34\x06\xd1\x42\x6a\x01\x10\x91\x42\x4c\x36\xd2\x67\x07\x7b\xf1\xe2\xbd\xf3\x2d\x58\x07\x09\x40\x18\x48\xf3\x89\xc9\xec\x05\x6c\x36\x40\x57\x8e\x20\xf3\x4d\x00\xe2\x78\xe1\xce\xa4\xec\x17\x1d\x07\xa5\x3f\x44\x01\x70\xcb\x2d\xea\x12\xcf\xce\x2f\x5b\x3a\xd6\x64\x43\x7e\xcf\xeb\xdb\xf3\x3c\x7a\x20\x6b\xc8\x6a\xa6\xd5\x9c\xa7\xf8\x3d\x50\xf8\xef\x49\xe9\x3c\xeb\x20\x1b\x7c\xc4\xaa\x9e\x3b\xd7\x7c\x6b\x5c\xbf\x78\x9a\xd9\x72\x97\x95\x15\xca\x3b\xb0\x0e\xad\x61\x0c\xdb\xce\x29\x43\x79\xf5\xa1\xc1\x12\xcb\x3f\x94\x2a\xf3\xbf\x65\x56\xe1\x03\x56\x33\x9b\x9f\x9e\x40\x8d\x75\xb9\x5c\x38\x91\xad\xee\x78\x8a\x55\x28\x65\xfe\xa3\xe2\x56\xfc\x06\x00\x00\xff\xff\xf3\xa6\x1d\x02\xe4\x01\x00\x00"),
		},
		"/src": &vfsgen۰DirInfo{
			name:    "src",
			modTime: time.Date(2020, 4, 19, 7, 6, 33, 150080800, time.UTC),
		},
		"/src/index.txt": &vfsgen۰CompressedFileInfo{
			name:             "index.txt",
			modTime:          time.Date(2020, 4, 19, 7, 6, 33, 151000000, time.UTC),
			uncompressedSize: 224,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x41\x4a\xc6\x30\x14\x04\xe0\x7d\x20\x77\x98\x5d\x12\xd1\x76\xd1\x6d\x28\x54\x14\x75\x21\x82\x37\x28\xcd\xab\x2d\x34\x79\xe1\x99\x0a\x22\xde\x5d\x82\x2d\xfc\xf0\xef\x3e\x98\x61\x66\x8d\x99\xa5\xe0\x06\xe3\x27\xde\x69\x9c\x0a\x66\xe1\x08\x23\xd5\x46\xab\xab\xfc\xe1\xed\xf5\xb2\x72\x17\x38\x1a\xad\xb4\x9a\xf7\x34\x95\x95\x13\x86\x9c\xad\xc3\x8f\x56\x80\x50\xd9\x25\xc1\x56\x03\x3e\xac\x5f\xfd\x3f\x01\xbf\x74\xfd\x13\x1f\x97\xcf\xb4\x6d\xec\xdb\xa5\x3b\x62\xdf\x9e\x55\xa7\xd5\x6f\x5d\x3f\xaf\x1b\xa1\x14\x48\xac\x1f\x72\x46\xdb\xdf\x22\xf0\xb4\x47\x4a\xa5\xf9\xa0\xf2\xb8\x51\xe5\xfd\xf7\x4b\xb0\x46\x98\x8b\x71\xee\x2f\x00\x00\xff\xff\x92\x66\xbd\x5d\xe0\x00\x00\x00"),
		},
		"/tsconfig.txt": &vfsgen۰CompressedFileInfo{
			name:             "tsconfig.txt",
			modTime:          time.Date(2020, 4, 19, 6, 28, 1, 192147100, time.UTC),
			uncompressedSize: 413,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\xb1\x6a\xc3\x40\x0c\x06\xe0\x3d\x90\x77\x38\x34\x9a\x50\x6f\x19\xbc\x95\x34\x43\x97\x16\xda\x6e\xa5\x94\xe4\x2c\x1a\xa5\x77\x92\x91\x74\x25\xa5\xe4\xdd\x8b\x1d\x27\x01\x43\x96\x1b\xfe\x4f\x27\xd0\xff\x37\x9f\x85\x00\x51\x72\x47\x09\xf5\xb9\x73\x12\x36\x68\xc2\x90\x87\x00\x89\xb6\xd0\x84\x77\x40\x5b\xc2\x22\x40\x2b\x19\x3e\x16\xa3\x65\x69\x4b\x42\x68\x86\xff\x59\x78\x6f\x70\x26\xdf\xe8\x17\x7a\x4f\xeb\xd7\xe5\x25\x95\xe2\x0f\xa4\x7d\x7a\x57\x6f\x0b\xa5\xf6\x22\x2c\x8f\xb9\x4b\x14\xc9\xef\xf9\x17\x9a\xe0\x5a\xf0\x6c\x8a\x59\x7e\x70\x25\x39\x23\xbb\x4d\xb0\x53\x34\xd4\x9e\xd9\x7c\xcd\x25\x4f\x07\xae\x9b\x5f\xd0\x8b\xf2\x6d\x7f\xdb\xd1\x14\xcd\x95\xa2\x3f\x95\x94\x56\x3b\x8c\xdf\x53\xde\xdb\xa1\x3f\x46\x71\x13\xfd\x74\xca\x71\x78\x81\x38\xa6\xd2\xe2\xd0\x9c\x69\xac\xab\xaa\xae\xc6\xde\x00\x0f\x57\x63\x69\xf1\xf3\x54\xa3\xf5\xf5\x0e\xa5\x8c\xd3\xf3\xd9\xf1\x3f\x00\x00\xff\xff\xce\x58\x03\x49\x9d\x01\x00\x00"),
		},
		"/webpack.config.txt": &vfsgen۰CompressedFileInfo{
			name:             "webpack.config.txt",
			modTime:          time.Date(2020, 4, 19, 6, 27, 46, 512424400, time.UTC),
			uncompressedSize: 384,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x4a\xc4\x30\x10\x86\xef\x85\xbe\xc3\x1c\x84\xd9\x85\xda\xde\xb3\x2c\x3e\x88\x4a\xa9\xcd\x88\x91\x6c\x52\x33\x13\x89\xc8\xbe\xbb\x4c\x53\xad\x9b\x43\x26\x93\x7f\xbe\xfc\x3f\x99\x63\x60\x81\x65\x92\x37\x38\x43\xa2\x8f\xec\x12\x1d\x50\x7b\x3c\x9e\xda\xa6\x6d\x2e\xd1\x66\x4f\x3d\x95\x25\x26\x61\x38\xc3\x77\xdb\x00\x50\x90\xf4\x65\x00\xfb\x81\xd3\x3c\xb8\x60\xa9\xf4\xc2\x05\x3b\x15\x2b\x62\xea\x24\x40\xca\x9e\xd8\xc0\x63\xed\xe0\xf7\x5a\x97\x10\x8b\x81\xe1\x49\xd9\x87\xbb\xa1\xdb\x95\xcc\x64\x00\x85\xef\x7d\x9c\x2c\x25\xfc\x27\x51\x99\x7d\xb6\x64\x60\x08\xd1\xd2\x58\xdd\x78\x87\xaf\xdb\xe9\x79\xad\xb5\x4b\xc4\xd1\x7f\xee\x99\xa8\x08\x05\x76\x31\x68\x30\xc0\x9a\x7d\xad\x6b\x79\x67\xbc\xc1\x63\x96\x25\xcb\x1f\xfd\xea\x3c\x85\xe9\xa2\x09\x5f\x72\xb0\x9e\x14\xd8\x5c\xf5\xeb\xcc\xba\xf7\x9b\xe9\x61\x1c\xad\x4b\x3a\xdf\x01\x5a\xc7\x82\xc7\xfa\x74\xdb\x5c\x4f\x3f\x01\x00\x00\xff\xff\x13\x6a\x50\x9d\x80\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/dist"].(os.FileInfo),
		fs["/main.txt"].(os.FileInfo),
		fs["/package.txt"].(os.FileInfo),
		fs["/src"].(os.FileInfo),
		fs["/tsconfig.txt"].(os.FileInfo),
		fs["/webpack.config.txt"].(os.FileInfo),
	}
	fs["/dist"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/dist/index.txt"].(os.FileInfo),
	}
	fs["/src"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/src/index.txt"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
